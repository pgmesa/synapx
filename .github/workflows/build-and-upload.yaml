name: Build and Upload to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      skip_pypi:
        description: 'Skip PyPI upload to test workflow without publishing'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # Required to upload files to releases

jobs:
  build:
    name: Build and Upload Wheels to Release
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    strategy:
      matrix:
        os: [windows-2022, ubuntu-22.04]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install System Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential ninja-build

      - name: Install Python Dependencies
        shell: bash
        run: |
          pip install --upgrade pip setuptools wheel twine build toml packaging \
            "numpy<2.0.0" \
            "pybind11>=2.6.0,<3.0.0" \
            "pybind11-stubgen>=2.0.0,<3.0.0" \
            "pytest>=8.0.0,<9.0.0"

      - name: Install auditwheel for manylinux compliance
        if: runner.os == 'Linux'
        run: |
          pip install auditwheel parchelf

      - name: Install GCC 12 and G++ 12
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12

      - name: Install VCPKG (Linux)
        if: runner.os == 'Linux'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh

      - name: Set VCPKG_ROOT (Linux)
        if: runner.os == 'Linux'
        run: echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV

      - name: Install VCPKG (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat

      - name: Set VCPKG_ROOT (Windows)
        if: runner.os == 'Windows'
        run: echo "VCPKG_ROOT=${{ github.workspace }}\\vcpkg" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build Extension & Wheel (Windows)
        if: runner.os == 'Windows'
        shell: cmd # Use cmd instead of powershell (io.h not found error)
        run: python scripts/build_wheel.py

      - name: Build Extension & Wheel (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: python scripts/build_wheel.py

      - name: Upload Wheels to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.whl

  upload-pypi:
    name: Upload Wheels to PyPI
    needs: build  
    runs-on: ubuntu-latest
    # Run if build succeeded OR if build was skipped (manual trigger)
    if: always() && (needs.build.result == 'success' || needs.build.result == 'skipped')
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download wheels from latest release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "Latest release: $LATEST_RELEASE"
          
          # Create dist directory
          mkdir -p dist
          
          # Download all .whl files from the latest release
          gh release download "$LATEST_RELEASE" --pattern "*.whl" --dir dist/
          
          # Check if we downloaded any files
          if [ -z "$(ls -A dist/)" ]; then
            echo "No wheel files found in latest release"
            exit 1
          fi
          
          echo "Downloaded wheels:"
          ls -la dist/

      - name: Upload to PyPI
        if: ${{ !inputs.skip_pypi }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/